#!/bin/env python2

import json
import os
import re
import subprocess
import sys


class ScalerError(Exception):
    """An error to raise on scaling error."""

    def __init__(self, message, cause=None):
        """
        Initialize the exception.

        @param message The exception message.
        @param cause The cause of the exception.
        """
        Exception.__init__(self, message, cause)
        self.message = message
        self.cause = cause

    def __str__(self):
        """
        Return the exception message.

        @return The exception message.
        """
        return self.message


class Scaler(object):
    """Base scaler class."""

    def __init__(self, settings):
        """
        Initialize the scaler.

        @param settings The scaler settings.
        """
        self.sizes = settings['sizes']
        self.settings = settings

    def get_size(self):
        """Return the current size of the scaler or None of undetermined."""
        factors = {f[1]: f[0] for f in self.sizes.iteritems()}
        current = self.get()
        nearest = min(factors.keys(), key=lambda factor: abs(factor - current))
        return factors[nearest]

    def set_size(self, size):
        """Set the scaler to the given size."""
        factor = self.sizes.get(size, None)
        if factor is None:
            raise ScalerError("No factor for size {}.".format(size))
        self.set(factor)


class DpiScaler(Scaler):
    """Adjust the Xorg DPI setting."""

    def get(self):
        """Return the Xorg DPI value."""
        match = re.compile(r'^\s*resolution:')
        replace = re.compile(r'^\s*resolution:\s+([0-9]+)x.*$')

        out = subprocess.check_output('xdpyinfo')
        for line in out.split("\n"):
            if match.match(line):
                return int(replace.sub('\\1', line))

    def set(self, size):
        """Set the Xorg DPI value."""
        subprocess.call(['xrandr', '--dpi', str(size)])


class ChromeScaler(Scaler):
    """Adjust Google Chrome zoom level."""

    default_preferences = '~/.config/google-chrome-unstable/Default/Preferences'

    @classmethod
    def is_running(cls):
        """Check if Chrome is running."""
        cmd = "ps ax | awk '{print $5}' | grep -q '/chrome$'"
        return subprocess.call(cmd, shell=True) == 0

    def __init__(self, settings):
        super(ChromeScaler, self).__init__(settings)
        self.preferences = os.path.expanduser(
            settings.get('preferences', self.default_preferences))
        self.hostzoom = settings.get('hosts', {})

    def load(self):
        """Load the Chrome preferences."""
        try:
            return json.load(open(self.preferences, 'r'))
        except IOError as e:
            raise ScalerError("Unable to open preferences for reading.", e)

    def save(self, preferences):
        """Save the Chrome preferences."""
        if self.is_running():
            #TODO: Restart Chrome to update preferences.
            raise ScalerError("Chrome is running, unable to write preferences.")
        try:
            json.dump(preferences, open(self.preferences, 'w'), indent=4)
        except IOError as e:
            raise ScalerError("Unable to open preferences for writing.", e)

    def get(self):
        """Return the scaling factor."""
        preferences = self.load()
        return preferences['partition']['default_zoom_level']['0']

    def set(self, scale):
        """Set the scaling factor."""
        preferences = self.load()
        preferences['profile']['default_zoom_level'] = scale
        preferences['profile']['per_host_zoom_levels'] = self.hostzoom
        self.save(preferences)


class Scalers(object):
    """Scale the UI."""

    def __init__(self, settings):
        """
        Initialize the scalers.

        @param hosts A dict of hostnames with zoom values to set in Chrome.
        """
        self.settings = settings
        self.scalers = (
            DpiScaler,
            ChromeScaler,
        )
        self.index_scaler = self.scalers[0]

    def get_scaler(self, scaler):
        """Return an initialized scaler."""
        settings = self.settings.get(scaler.__name__, {})
        return scaler(settings)

    def get_index_scaler(self):
        """Return the key scaler."""
        return self.get_scaler(self.index_scaler)

    def get_size(self):
        """Return the current size."""
        return self.get_index_scaler().get_size()

    def set_size(self, size):
        """Scale all scalers."""
        for scaler in (self.get_scaler(s) for s in self.scalers):
            try:
                scaler.set_size(size)
            except Exception as e:
                sys.stderr.write("Error in {}: {}\n".format(
                    scaler.__class__.__name__, e))

    def toggle(self):
        """Toggle all scalers between small and large."""
        size = self.get_index_scaler().get_size()
        if size in ('small', 'tiny'):
            self.set_size('large')
        else:
            self.set_size('small')


def scale(hosts, size=None):
    """
    Scale the interface.

    @param hosts A dict of hosts to scale a particular way in Chrome.
    @param size The size to scale to. Either 'small' or 'large'. Otherwise will
        toggle the scale between the two.
    """
    settings = {
        'ChromeScaler': {
            'hosts': hosts,
            'sizes': {
                'tiny': -0.5778829455375671,
                'small': 0.0,
                'large': 3.069389038663465,
            }
        },
        'DpiScaler': {
            'sizes': {
                'tiny': 72,
                'small': 96,
                'large': 165,
            }
        },
    }
    scaler = Scalers(settings)
    if size:
        scaler.set_size(size)
    else:
        scaler.toggle()


if __name__ == '__main__':
    size = None
    hosts = {
        "grooveshark.com": 0.0,
    }

    if len(sys.argv) > 1:
        size = sys.argv[1]

    res = scale(hosts, size)
    if not res:
        sys.exit(1)
