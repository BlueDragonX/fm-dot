#!/bin/env python3
"""
usage: configurate [-h|--help] TEMPLATE [CONTEXT]
Generate a config file using the template file. The generated file is printed
to stdout. The context name may be provided to use a specific context for
template substitution instead of the hostname. The contexts file is located at
~/.dot/contexts.
"""

import os
import socket
import sys

sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'lib'))

from conf import ConfigGenerator
from pystache import defaults

defaults.TEMPLATE_EXTENSION = False


def printerr(data):
    sys.stderr.write("%s\n" % data)


class Configurator(ConfigGenerator):

    """
    Extend ConfigGenerator with the correct path names and additional
    functionality supporting automatic generation using the context file.
    """

    def __init__(self):
        """Initialize object with correct context and template paths."""
        base = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
        contexts = os.path.join(base, 'contexts')
        super(self.__class__, self).__init__(contexts)

    def generate(self, context, template):
        """
        Generate a config file.

        @param template The path to the template to use.
        @param context The context to use for replacement. Defualts the to
            hostname.
        @return The generated config file.
        """
        if not context:
            context = socket.gethostname()
        return super(Configurator, self).generate(context, template)


def usage(exit=None):
    printerr(__doc__.strip())
    if exit is not None:
        sys.exit(exit)


def main():
    print(len(sys.argv))
    if '-h' in sys.argv or '--help' in sys.argv:
        usage(0)
    if len(sys.argv) < 2 or len(sys.argv) > 3:
        usage(1)

    context = None
    template = sys.argv[1]
    if len(sys.argv) == 3:
        context = sys.argv[2]

    try:
        print(Configurator().generate(context, template))
    except Exception as e:
        printerr(e)
        sys.exit(1)

if __name__ == '__main__':
    main()
